
// ---------------- //
// ----- TODO ----- //
// ---------------- //

	
- Upload all meshes into one buffer with ID's (ID should be part of the vertex layout),
	and add a uniform array that stores the transforms by ID

- Add aspect ratio into the shader as a uniform float

- Investigate why the destructor of the Shader class throws an exception !!!
	- So far it looks like the unordered_map in UniformSet causes the problem. The unordered_map
		is a vector of lists, so no wonder that the read access violation is coming from the <list> header.
	- Update: I have changed the unordered map to just map, but still got an error. For some reason a 
		shaders destructor is called twice, and this is causing the issue. When I remove the explicit shader destructor call
		from the Skaybox destructor, the error goes away. However I still dont know why the destructor is called
		twice on the same object, my best guess is that I have implemented the move semantics incorrectly somewhere.
		


- Revise the matrix library and rewrite to column major



- Add skybox
	- Create the required buffers and fill them with data:
		- create six quads in 3D space with texture coordinates
		- create the corresponding index data
	- Create a shader that can process the data and draw the textures on the quads
	- Figure out why only one texture is being displayed!




// ---------------- //
// ----- Done ----- //
// ---------------- //

- Add timesteps

- Exclude vertices behind camera
	The whole way of mapping directions into the clip space should be reviewed.
	When I create a huge sphere, and watch the scene inside, I see weird behaviour.
		Most likely due to the vertices behind the observer.


- Move input handling somewhere else, currently it is in the main functions game loop

- Implement rule of five for the Vertex and Index buffer classes

- Implement rule of five for the Skybox class

- Implement rule of five for the Shader class

- use the move assignment operator of the shader in Skybox.cpp - "Skybox::Skybox(Skybox && other) noexcept"







