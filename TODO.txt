
// ---------------- //
// ----- TODO ----- //
// ---------------- //

- Add some sort of AI that controls ships and shoots

- Add helper visuals:
	- most of this is done, the middle of the screen marker needs to be fixed,
	or created in a different way


- Create a menu

- Revise and add new models
	- Oneill cylinder,
	- Warships,
	- space stations,
	- asteroids,
	- Stellar engine

- Create a function that saves the state of the game into a file
	
- Create a level where the Earth must be protected from infalling asteroids.
	This can be done since I have added damage on collision.

- Create a struct in the shader that defines all properties of the observer.
	This way only one uniform upload is enough to set the observer. -> I tried this for the observer,
		but it's not possible to get the location of the struct, each component of the struct has to be uploaded separately,
		so there is no gain in defining a struct (as I read, it is possible to use uniform buffers).
		So far I created a float array that holds all parameters of the observer (location, orientation and zoom level)
		and this float array is uploaded with one uploat float array call and it's content is organized into a vec3/mat3/float
		in the shader.
	The same should be done separately for the bodies.

- Correct the orientation of the skybox.

- Upload all meshes into one buffer with ID's (ID should be part of the vertex layout),
	and add a uniform array that stores the transforms by ID

// Couldnt figure this out, just removed that member variable from the class
- Investigate why the destructor of the Shader class throws an exception !!!
	- So far it looks like the unordered_map in UniformSet causes the problem. The unordered_map
		is a vector of lists, so no wonder that the read access violation is coming from the <list> header.
	- Update: I have changed the unordered map to just map, but still got an error. For some reason a 
		shaders destructor is called twice, and this is causing the issue. When I remove the explicit shader destructor call
		from the Skybox destructor, the error goes away. However I still dont know why the destructor is called
		twice on the same object, my best guess is that I have implemented the move semantics incorrectly somewhere.
	(is that possible that the iterators or something got invalid upon move assignment?
	just like it happened to the buffer elements?)




// ---------------- //
// ----- Done ----- //
// ---------------- //

- Add timesteps

- Exclude vertices behind camera
	The whole way of mapping directions into the clip space should be reviewed.
	When I create a huge sphere, and watch the scene inside, I see weird behaviour.
		Most likely due to the vertices behind the observer.

- Move input handling somewhere else, currently it is in the main functions game loop

- Implement rule of five for the Vertex and Index buffer classes

- Implement rule of five for the Skybox class

- Implement rule of five for the Shader class

- use the move assignment operator of the shader in Skybox.cpp - "Skybox::Skybox(Skybox && other) noexcept"

- Add skybox
	- Create the required buffers and fill them with data:
		- create six quads in 3D space with texture coordinates
		- create the corresponding index data
	- Create a shader that can process the data and draw the textures on the quads
	- Figure out why only one texture is being displayed!

- Add aspect ratio into the shader as a uniform float

- Debug the scenario definition parser, since it gives bad scale data

- Revise the matrix library and rewrite to column major
	- This will be necessary for the struct uploads


- Add mouse controls:
	- turning based on mouse position
	- shoot on mouse button press
	- zooming with mouse scrolling

- Add helper visuals:
	- targeting cross
	- display the direction of velocity (forward and backward) to help with maneuvering
		(especially with breaking)
	- put small circles or markers (triangles maybe) around faraway objects (create a 
		dedicated shader with a uniform buffer, that stores all body positions)























